#include <vtkPolyData.h>
#include <igtlnode.h>

void igtlnode_class::SendPolyData(const char* name,vtkSmartPointer<vtkPolyData> polydata)
{
	igtl::PolyDataMessage::Pointer polyDataMsg;
	polyDataMsg = igtl::PolyDataMessage::New();
	polyDataMsg->SetDeviceName(name);	
	
	igtl::PolyDataPointArray::Pointer pointArray;
	pointArray = igtl::PolyDataPointArray::New();

	double *point;
	for (unsigned int i = 0; i <polydata->GetNumberOfPoints(); i ++)
	{

		point = polydata->GetPoint(i);
		pointArray->AddPoint(static_cast<igtlFloat32>(point[0]),static_cast<igtlFloat32>(point[1]),static_cast<igtlFloat32>(point[2]));
	}
	
	vtkSmartPointer<vtkCellArray> cellarray =
    vtkSmartPointer<vtkCellArray>::New();
    
	cellarray = polydata->GetPolys();
	
	igtl::PolyDataCellArray::Pointer polyArray;
	polyArray = igtl::PolyDataCellArray::New();
	
	vtkSmartPointer<vtkIdList> IdList =
    vtkSmartPointer<vtkIdList>::New();
	
	cellarray->InitTraversal();
	while (cellarray->GetNextCell(IdList))
	{
		std::list<igtlUint32> cell;
		for (int i = 0; i < IdList->GetNumberOfIds(); i++)
		{
			cell.push_back(IdList->GetId(i));
		}
		polyArray->AddCell(cell);
	}
	
	polyDataMsg->SetPoints(pointArray);
	polyDataMsg->SetPolygons(polyArray);
	polyDataMsg->Pack();

	std::cerr << "Size of pack: " << polyDataMsg->GetPackSize() << std::endl;
	std::cerr << "Name of type: " << polyDataMsg->GetDeviceType() << std::endl;
	std::cerr << "Sending a POLYDATA message..." << std::endl;

	socket->Send(polyDataMsg->GetPackPointer(), polyDataMsg->GetPackSize());

std::cerr << "Success" << std::endl;
}
