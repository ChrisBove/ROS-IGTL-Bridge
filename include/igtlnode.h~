#ifndef IGTLNODE_H
#define IGTLNODE_H
// ROS Includes
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "sensor_msgs/Image.h"
#include "geometry_msgs/Transform.h"
// OpenCV Includes
#include "image_transport/image_transport.h"
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
// Boost Includes
#include <boost/thread.hpp>   
// Messages Includes
#include <rosigtlbridge/igtltransform.h>
#include <rosigtlbridge/igtlpoint.h>
#include <rosigtlbridge/igtlpolydata.h>
#include <rosigtlbridge/igtlimage.h>
#include <rosigtlbridge/igtlstring.h>
#include <rosigtlbridge/Item.h>
// IGTL Includes
#include "igtlImageMessage.h"
#include "igtlMessageHeader.h"
#include "igtlMessageBase.h"
#include "igtlMath.h"
#include "igtlOSUtil.h"
#include "igtlPolyDataMessage.h"
#include "igtlServerSocket.h"
#include "igtlSmartPointer.h"
#include "igtlStatusMessage.h"
#include "igtlStringMessage.h"
#include "igtlTransformMessage.h"
#include "igtlPointMessage.h"
// VTK Includes
#include <vtkCellArray.h>
#include <vtkIdList.h>
#include <vtkPolyData.h>
#include <vtkPoints.h>
#include <vtkSmartPointer.h>
#include <vtkPolyData.h>
#include <vtkPolygon.h>
#include <vtkVertex.h>
#include <vtkPolyLine.h>
#include <vtkTriangleStrip.h>
#include <vtkFloatArray.h>
#include <vtkTransform.h>
// C++ Includes
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <math.h>
#include <sstream>
#include <stdint.h>

class igtlnode_class
{
public:
	igtlnode_class(int argc, char *argv[], const char* node_name);
	~igtlnode_class();
	void Run();
	void testfunction();

	igtl::Socket::Pointer socket;
	igtl::Socket::Pointer GetSocketPointer();
	void CreateIGTLServer();
	void ConnectToIGTLServer();
	
	// PD Message Conversions
	static rosigtlbridge::igtlpolydata PolyDataToMsg(const char* name,vtkSmartPointer<vtkPolyData> polydata);
	static void MsgToPolyData(const rosigtlbridge::igtlpolydata::ConstPtr& msg, vtkSmartPointer<vtkPolyData> polydata);
	
private:
	ros::NodeHandle *nh;
	ros::Publisher point_pub;
	ros::Publisher transform_pub;
	ros::Publisher polydata_pub;
	ros::Publisher image_pub;
	ros::Publisher string_pub;
	ros::Subscriber sub_point;
	ros::Subscriber sub_transform;
	ros::Subscriber sub_polydata;
	ros::Subscriber sub_image;
	ros::Subscriber sub_video;
	ros::Subscriber sub_string;
	
	// Callbacks
	void IGTLReceiverThread();
	void pointCallback(const rosigtlbridge::igtlpoint::ConstPtr& msg);
	void transformCallback(const rosigtlbridge::igtltransform::ConstPtr& msg);
	void stringCallback(const rosigtlbridge::igtlstring::ConstPtr& msg);
	void imageCallback(const rosigtlbridge::igtlimage::ConstPtr& msg);
	void videoCallback(sensor_msgs::Image::ConstPtr msg);
	void polydataCallback(const rosigtlbridge::igtlpolydata::ConstPtr& msg);

	// Sending
	void SendTransform(const char* name, igtl::Matrix4x4 &sendMatrix);
	void SendPoint (const char* name,geometry_msgs::Point point);
	void SendImage(rosigtlbridge::igtlimage::ConstPtr imgmsg);
	void SendVideo(sensor_msgs::Image::ConstPtr imgmsg);
	void SendPolyData(const char* name,vtkSmartPointer<vtkPolyData> polydata);
	void SendString(const char* name, std::string stringmsg);

	// Receiving
	void ReceivePoints(igtl::MessageHeader * header);
	void ReceiveImage(igtl::MessageHeader * header);
	void ReceiveTransform(igtl::MessageHeader * header);
	void ReceivePolyData(igtl::MessageHeader * header,vtkSmartPointer<vtkPolyData> poly);
	void ReceiveString(igtl::MessageHeader * header);	
};
#endif 
